package COW1.Tests;

import COW1.Calculator6;

public class CalcLevel6Tester
{
    public static boolean testLevel6(){
        boolean halfLife = testcalcHalfLife();
        boolean stdDev = testcalcStandardDeviation();
        boolean sysEq = testsolveSystemOfEquations();
        boolean pyrSurface = testcalcPyramidSurfaceArea();
        boolean pyrVolume = testcalcPyramidVolume();
        if(halfLife && stdDev && sysEq && pyrSurface && pyrVolume){
            System.out.println("Level 6 works");
            return true;
        }else{
            System.out.println("Level 6 DOES NOT work");
            return false;
        }
    }

    public static boolean testcalcHalfLife(){
        Calculator6 student = new Calculator6();
        boolean output = true;

        double [] doubleAValues = {823.1534765189106, 24.998166509984554, 7.179921505398218E14, 324170.3816463182, 93.46614450092825, 405.3103346488874, 754870.1843288295, 7.937995413060399, 67.1696071402573, 1.709760169896033E8, 146483.81945273204, 2.795543392099812E14, 52034.604430850864, 2.298704847548284E10, 6.040405554301992E12, 14.095033011459757, 2.7566106570640424E11, 9.540867788225985E8, 8.1499249250758E10, 6.716015137114395E13, 6.965467220765796E12, 8.346094837275518E11, 1.5020770601090372E10, 6922643.361832712, 9.790797627312614E9, 2.6360533210130698E11, 8.985465709719852E10, 9.913635839061207E12, 28.71239931366332, 71.22824065898335, 1.3431143679313517E14, 9.291506810005786E11, 7.61834691194067E14, 5972.870607873184, 57.30387259925309, 9595.025506400772, 917.1635040717327, 3.786071927129964E14, 2.1101968553452255E10, 6.253163007418166E8, };
        double [] doubleBValues = {477.36176315923467, 17.39224701518712, 1.424816849470049E14, 44761.27839578438, 21.938353590927143, 324.1744448782974, 426393.81068961753, 7.209542680272339, 65.7189415389854, 2.270623168550401E7, 128038.41107108843, 2.5090194943739144E14, 50594.77650578342, 1.4007722083468124E10, 5.441495716301265E12, 8.431833696037861, 1.6610872853354544E11, 2.0005637434488332E8, 7.786603490578561E10, 6.5391249357565836E13, 5.397261227110942E12, 8.634872762755272E10, 7.44402219970419E9, 5188777.890555669, 2.935673374164606E9, 1.1980890050780272E11, 2.444849667284138E10, 1.0756528044524417E12, 9.115333966041726, 29.611287497362355, 1.1080486211544607E13, 3.9561704356690356E11, 7.320097033772154E14, 458.2420839696117, 26.17634204742349, 8946.134188008278, 649.2648456614672, 1.423303115626275E14, 1.7932554908574844E10, 2.762307052882456E8, };
        double [] doubleCValues = {9.0, 50.0, 14.0, 229.0, 8.0, 88.0, 97.0, 43.0, 943.0, 114.0, 86.0, 8.0, 336.0, 47.0, 36.0, 3.0, 96.0, 8.0, 95.0, 407.0, 4.0, 9.0, 619.0, 294.0, 749.0, 713.0, 85.0, 10.0, 4.0, 225.0, 2.0, 100.0, 2.0, 8.0, 18.0, 23.0, 5.0, 78.0, 75.0, 72.0, };
        double [] resultValues = {11.44923916253443, 95.53325684828776, 6.000364506790934, 80.17002664054887, 3.8259414272380017, 273.07431731584444, 117.71243706363221, 309.64884491432707, 29937.129173386824, 39.13983324206273, 442.92308872785503, 51.28038849521693, 8299.794968996954, 65.77116465159693, 238.97693520665004, 4.047116316636629, 131.36870861486852, 3.5496963562664927, 1443.9312425339367, 10569.261341857784, 10.86978344049903, 2.7498931066188725, 611.1741801942749, 706.8526940760404, 431.0208564103529, 626.7335907571593, 45.2645909717136, 3.120902080081521, 2.416470946874796, 177.68271380210817, 0.5556344148915436, 81.18148294183896, 34.71305472870949, 2.1596857586521527, 15.924001683942391, 227.67263189067336, 10.03266935921084, 55.2619712428343, 319.4254871030879, 61.083601190985014, };

        for(int i = 0; i < doubleAValues.length; i++){
            if(Math.abs(student.calcHalfLife(doubleAValues[i], doubleBValues[i], doubleCValues[i]) - resultValues[i])/resultValues[i] >= .00001){
                System.out.println("calcHalfLife failed, " + "calcHalfLife(" + doubleAValues[i] + ", " + doubleBValues[i] + ", " + doubleCValues[i] + ")" + " results in " + student.calcHalfLife(doubleAValues[i], doubleBValues[i], doubleCValues[i]) + ", not equal to " + resultValues[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("calcHalfLife works");
        }else{
            System.out.println("calcHalfLife does not work");
        }
        return output;
    }

    public static boolean testcalcStandardDeviation(){
        Calculator6 student = new Calculator6();
        boolean output = true;

        double [] doubleAValues = {33.0, -5.0, 6.0, -578.0, -54.0, -948.0, 95.0, -1.0, -61.0, 95.0, 49.0, 7.0, -6.0, -15.0, -1.0, 81.0, 24.0, 425.0, 408.0, 675.0, 31.0, -36.0, -15.0, 86.0, -7.0, -661.0, 19.0, -876.0, -3.0, -558.0, 2.0, -45.0, 8.0, -56.0, 168.0, -76.0, -10.0, -37.0, 687.0, 1.0, };
        double [] doubleBValues = {-19.0, -7.0, 622.0, -809.0, 5.0, 8.0, -8.0, 98.0, -41.0, 477.0, 59.0, 331.0, -9.0, 21.0, -51.0, 255.0, -9.0, 93.0, 5.0, -44.0, 584.0, 28.0, 123.0, -85.0, 8.0, 9.0, 8.0, 434.0, 50.0, -517.0, 1.0, 15.0, 409.0, -8.0, -999.0, 17.0, 9.0, 6.0, 77.0, 6.0, };
        double [] doubleCValues = {4.0, 20.0, -82.0, -177.0, 7.0, 37.0, -464.0, -50.0, -7.0, -2.0, -5.0, -74.0, 927.0, 298.0, 4.0, 876.0, 5.0, -2.0, -70.0, -9.0, -931.0, 7.0, 5.0, 201.0, -481.0, 2.0, 562.0, 601.0, -4.0, -210.0, 434.0, 92.0, 90.0, -450.0, 600.0, -69.0, -5.0, 78.0, 6.0, -888.0, };
        double [] doubleDValues = {1.0, 5.0, 8.0, 45.0, -5.0, -9.0, -998.0, 0.0, 0.0, 56.0, 9.0, -663.0, 904.0, -1.0, -69.0, -8.0, 50.0, 7.0, 9.0, 506.0, 43.0, 8.0, -662.0, -357.0, -113.0, -84.0, 31.0, -318.0, -8.0, -330.0, -17.0, 4.0, -4.0, 9.0, 1.0, 7.0, -70.0, 38.0, -70.0, -45.0, };
        double [] doubleEValues = {3.0, 8.0, -5.0, 14.0, 6.0, -5.0, -783.0, -1.0, -2.0, -904.0, 8.0, -759.0, 36.0, 0.0, -59.0, -3.0, 16.0, -6.0, 86.0, 998.0, -40.0, -4.0, 533.0, -713.0, -733.0, 79.0, -43.0, -105.0, -19.0, -445.0, 29.0, -7.0, -71.0, 3.0, 8.0, -3.0, -93.0, 42.0, 41.0, -61.0, };
        double [] resultValues = {16.608431593621358, 9.744742172063868, 258.24515484322256, 337.37516209703404, 23.301502097504354, 382.6395693077233, 424.7552707147964, 48.33797678844244, 24.45730974575904, 456.38869398792076, 25.187298386289864, 415.34159435337074, 445.4160302458814, 119.25535627383786, 30.544393920979996, 331.8297153661799, 19.79292802998081, 164.86673406118047, 167.62887579411847, 401.4241646936567, 488.39189182458796, 21.010473578670236, 384.0991538652487, 328.6807569663913, 293.21555211141174, 269.99925925824317, 224.71902456178472, 532.0042856970233, 24.07820591323199, 127.24621801845429, 172.725678461542, 44.906124303929865, 169.2200933695523, 176.28908077359756, 524.6776534216033, 39.51910930170365, 40.106857269050636, 38.655400657605405, 273.75127396963836, 346.26383004870723, };

        for(int i = 0; i < doubleAValues.length; i++){
            if(Math.abs(student.calcStandardDeviation(doubleAValues[i], doubleBValues[i], doubleCValues[i], doubleDValues[i], doubleEValues[i]) - resultValues[i])/resultValues[i] >= .00001){
                System.out.println("calcStandardDeviation failed, " + "calcStandardDeviation(" + doubleAValues[i] + ", " + doubleBValues[i]  + ", " + doubleCValues[i]  + ", " + doubleDValues[i]  + ", " + doubleEValues[i]  + ")" + " results in " + student.calcStandardDeviation(doubleAValues[i], doubleBValues[i], doubleCValues[i], doubleDValues[i], doubleEValues[i]) + ", not equal to " + resultValues[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("calcStandardDeviation works");
        }else{
            System.out.println("calcStandardDeviation does not work");
        }
        return output;
    }

    public static boolean testsolveSystemOfEquations(){
        Calculator6 student = new Calculator6();
        boolean output = true;

        double [] doubleAValues = {-137.0, 3.0, 72.0, -11.0, 17.0, 2.0, 631.0, -63.0, -1.0, -5.0, 48.0, -315.0, -621.0, -74.0, -2.0, 28.0, 76.0, 43.0, -165.0, -8.0, -409.0, 61.0, -8.0, -93.0, 49.0, -170.0, 791.0, -9.0, 144.0, 2.0, -633.0, -40.0, 416.0, 8.0, 7.0, -72.0, 67.0, -2.0, 54.0, -3.0, };
        double [] doubleBValues = {79.0, -65.0, 480.0, -800.0, 1.0, -666.0, -167.0, -7.0, -6.0, 855.0, 9.0, -6.0, 1.0, 9.0, -94.0, -657.0, -53.0, -7.0, -71.0, -3.0, 523.0, 33.0, -8.0, 8.0, 157.0, -271.0, 18.0, 395.0, -10.0, -87.0, 6.0, 69.0, -244.0, 468.0, 346.0, -8.0, 496.0, 8.0, 716.0, 64.0, };
        double [] doubleCValues = {-4.0, 92.0, -9.0, 26.0, 65.0, 154.0, 914.0, -21.0, -96.0, -28.0, 5.0, 558.0, -560.0, 396.0, 18.0, 376.0, -3.0, 610.0, 45.0, 12.0, 1.0, 4.0, 698.0, 414.0, -88.0, -6.0, -13.0, 88.0, -5.0, 1.0, -625.0, -1.0, 7.0, 151.0, 660.0, 10.0, 35.0, -1.0, 6.0, -259.0, };
        double [] doubleDValues = {604.0, 30.0, -669.0, -6.0, -72.0, 830.0, -438.0, 5.0, 3.0, -535.0, 83.0, -563.0, 490.0, 9.0, 17.0, 307.0, -7.0, 89.0, -10.0, 56.0, -7.0, -81.0, 37.0, 76.0, 4.0, 0.0, -5.0, 475.0, 535.0, -8.0, 985.0, 537.0, 17.0, 403.0, 0.0, 22.0, -60.0, -539.0, 85.0, 2.0, };
        double [] doubleEValues = {-57.0, -118.0, 96.0, 5.0, 22.0, -528.0, -645.0, -97.0, 6.0, -707.0, 61.0, -522.0, 462.0, -6.0, 52.0, 749.0, -7.0, 78.0, -4.0, 32.0, -5.0, -85.0, -10.0, -52.0, -6.0, 2.0, 0.0, -834.0, -297.0, -10.0, -174.0, -488.0, 33.0, 336.0, 59.0, 15.0, -88.0, -441.0, 27.0, 1.0, };
        double [] doubleFValues = {508.0, 361.0, 584.0, 0.0, 3.0, -311.0, -41.0, 63.0, 4.0, -895.0, 39.0, 950.0, -332.0, 8.0, 36.0, 209.0, -1.0, 1.0, 3.0, 63.0, 0.0, 48.0, 51.0, -71.0, -9.0, -6.0, -10.0, 931.0, 237.0, 8.0, -922.0, 803.0, -21.0, 796.0, 60.0, 53.0, -11.0, 557.0, -96.0, -1.0, };
        double [] resultValues = {0.9999248252186334, 7.900375939849624, -0.8571846649107404, -0.026776519052523172, 3.1995515695067263, -0.5227940056985014, 1.242087220212396, 0.4031890660592255, -46.0, 1.7030132766400556, -0.02109124254928932, -1.773191267416735, 0.8990786103997328, -6.743801652892562, 2.891566265060241, 1.8814169784120969, 0.035437430786267994, 11.965551923560472, -0.66, -6.511363636363637, -8.762705923589204E-4, 0.7659235668789809, -17.47872340425532, -4.957426679280984, -2.1052060737527114, 4.817647058823529, 2.0, 2.449141956151211, -0.1030252819498637, -0.9581005586592178, 1.0964195256734977, 3.1323219072605943, -0.2737189527858581, 1.7308461886013038, 44.01937046004843, -0.6349557522123894, 0.09956419711699631, -0.7730073161340008, -1.159859937375846, 1.4885496183206106, };

        for(int i = 0; i < doubleAValues.length; i++){
            if(Math.abs(student.solveSystemOfEquations(doubleAValues[i], doubleBValues[i], doubleCValues[i], doubleDValues[i], doubleEValues[i], doubleFValues[i]) - resultValues[i])/resultValues[i] >= .00001){
                System.out.println("solveSystemOfEquations failed, " + "solveSystemOfEquations(" + doubleAValues[i] + ", " + doubleBValues[i]  + ", " + doubleCValues[i]  + ", " + doubleDValues[i]  + ", " + doubleEValues[i]  + ", " + doubleFValues[i]  + ")" + " results in " + student.solveSystemOfEquations(doubleAValues[i], doubleBValues[i], doubleCValues[i], doubleDValues[i], doubleEValues[i], doubleFValues[i]) + ", not equal to " + resultValues[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("solveSystemOfEquations works");
        }else{
            System.out.println("solveSystemOfEquations does not work");
        }
        return output;
    }

    public static boolean testcalcPyramidSurfaceArea(){
        Calculator6 student = new Calculator6();
        boolean output = true;

        double [] doubleAValues = {94.0, 367.0, 905.0, 941.0, 532.0, 674.0, 947.0, 14.0, 55.0, 110.0, 87.0, 706.0, 36.0, 679.0, 99.0, 355.0, 13.0, 317.0, 15.0, 78.0, 41.0, 45.0, 82.0, 81.0, 614.0, 9.0, 7.0, 93.0, 87.0, 46.0, 60.0, 641.0, 88.0, 544.0, 19.0, 711.0, 722.0, 95.0, 17.0, 290.0, };
        double [] doubleBValues = {73.0, 467.0, 948.0, 14.0, 81.0, 374.0, 2.0, 27.0, 34.0, 18.0, 14.0, 1.0, 63.0, 100.0, 941.0, 930.0, 667.0, 33.0, 95.0, 18.0, 587.0, 469.0, 31.0, 889.0, 68.0, 438.0, 273.0, 45.0, 32.0, 844.0, 699.0, 49.0, 53.0, 216.0, 724.0, 21.0, 63.0, 294.0, 237.0, 385.0, };
        double [] doubleCValues = {9.0, 16.0, 15.0, 16.0, 13.0, 9.0, 16.0, 14.0, 4.0, 14.0, 6.0, 17.0, 15.0, 6.0, 17.0, 3.0, 3.0, 6.0, 12.0, 9.0, 17.0, 14.0, 12.0, 11.0, 16.0, 17.0, 19.0, 13.0, 9.0, 15.0, 6.0, 16.0, 7.0, 16.0, 17.0, 18.0, 17.0, 12.0, 15.0, 19.0, };
        double [] resultValues = {78095.46056223592, 8980594.03492387, 3.2966450576942652E7, 109407.10899137495, 379665.6860180355, 2291019.2951321523, 15232.650939492181, 22666.586503858278, 5070.579926377797, 19691.978261477063, 4198.535068432871, 6023.778559781854, 142081.51411914243, 231330.9264670101, 4.027925924236716E7, 995405.2309176545, 385723.7515070281, 34339.5835671945, 202451.63746711408, 8630.789781583653, 1.5670561944266343E7, 6749218.561925223, 29424.721404846216, 1.481431187967508E7, 439703.16909314564, 8723464.11657624, 4243041.882546112, 64818.48750931524, 20366.642790064587, 2.513795327252439E7, 2545065.4135091137, 304151.33250654466, 29460.43387619921, 2266349.107330745, 2.3835371990945794E7, 146104.14147323658, 487258.9256042539, 1949903.541425006, 1982368.373943296, 8569784.259806473, };

        for(int i = 0; i < doubleAValues.length; i++){
            if(Math.abs(student.calcPyramidSurfaceArea(doubleAValues[i], doubleBValues[i], doubleCValues[i]) - resultValues[i])/resultValues[i] >= .00001){
                System.out.println("calcPyramidSurfaceArea failed, " + "calcPyramidSurfaceArea(" + doubleAValues[i] + ", " + doubleBValues[i] + ", " + doubleCValues[i] + ")" + " results in " + student.calcPyramidSurfaceArea(doubleAValues[i], doubleBValues[i], doubleCValues[i]) + ", not equal to " + resultValues[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("calcPyramidSurfaceArea works");
        }else{
            System.out.println("calcPyramidSurfaceArea does not work");
        }
        return output;
    }

    public static boolean testcalcPyramidVolume(){
        Calculator6 student = new Calculator6();
        boolean output = true;

        double [] doubleAValues = {51.0, 92.0, 318.0, 551.0, 51.0, 413.0, 29.0, 101.0, 734.0, 85.0, 78.0, 619.0, 604.0, 20.0, 48.0, 61.0, 437.0, 395.0, 198.0, 2.0, 209.0, 57.0, 92.0, 65.0, 661.0, 19.0, 46.0, 85.0, 209.0, 38.0, 74.0, 677.0, 93.0, 447.0, 42.0, 55.0, 108.0, 34.0, 994.0, 65.0, };
        double [] doubleBValues = {94.0, 973.0, 54.0, 390.0, 201.0, 880.0, 98.0, 29.0, 21.0, 467.0, 575.0, 683.0, 24.0, 646.0, 3.0, 92.0, 15.0, 149.0, 966.0, 23.0, 52.0, 58.0, 271.0, 5.0, 77.0, 959.0, 396.0, 582.0, 709.0, 17.0, 47.0, 14.0, 137.0, 24.0, 64.0, 28.0, 65.0, 28.0, 24.0, 719.0, };
        double [] doubleCValues = {11.0, 11.0, 17.0, 15.0, 11.0, 9.0, 19.0, 17.0, 15.0, 7.0, 12.0, 16.0, 3.0, 9.0, 12.0, 7.0, 7.0, 4.0, 9.0, 16.0, 15.0, 9.0, 5.0, 11.0, 10.0, 14.0, 5.0, 14.0, 11.0, 13.0, 18.0, 16.0, 19.0, 17.0, 18.0, 3.0, 12.0, 5.0, 12.0, 5.0, };
        double [] resultValues = {1406831.5017020889, 2.719128357061849E8, 7027449.6038329555, 4.9285175756009E8, 6432480.703968547, 6.590385075955479E8, 2642670.2329083704, 643725.1391144661, 1903575.6733218993, 2.2454629378329422E7, 9.62449252636919E7, 1.93557055503984E9, 50215.61701303689, 1.719849430165687E7, 1612.245948869755, 625401.176829265, 119101.48035215198, 2923131.666666666, 3.807280182660466E8, 7091.90024355886, 3323444.8019377715, 395117.4751691886, 3874843.1438173987, 5073.054949595447, 1.0051378451961568E7, 8.931805047718136E7, 4136908.555444978, 1.471679752937095E8, 3.2798573663973916E8, 48268.702593884314, 1390592.6308884418, 889450.3091855504, 1.6562157351590285E7, 1951250.8566897002, 1463462.9309887097, 6223.835901864165, 1702934.7834936788, 15287.015196699833, 2136763.297568715, 1.9270760545527246E7, };

        for(int i = 0; i < doubleAValues.length; i++){
            if(Math.abs(student.calcPyramidVolume(doubleAValues[i], doubleBValues[i], doubleCValues[i]) - resultValues[i])/resultValues[i] >= .00001){
                System.out.println("calcPyramidVolume failed, " + "calcPyramidVolume(" + doubleAValues[i] + ", " + doubleBValues[i] + ", " + doubleCValues[i] + ")" + " results in " + student.calcPyramidVolume(doubleAValues[i], doubleBValues[i], doubleCValues[i]) + ", not equal to " + resultValues[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("calcPyramidVolume works");
        }else{
            System.out.println("calcPyramidVolume does not work");
        }
        return output;
    }
}