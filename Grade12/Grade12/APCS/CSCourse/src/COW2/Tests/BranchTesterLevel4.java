package COW2.Tests;

import COW2.Calendar;
import COW2.Hogwarts;
import COW2.NumberAnalyzer;
import COW2.PayRoll;

public class BranchTesterLevel4
{
    public static void main(String [] arg){
        testLevel4();
    }

    public static boolean testLevel4(){
        boolean one = testWhatTypeOfNumberIsIt();
        boolean two = testwhatSeason();
        boolean three = testWhatIsMySalary();
        boolean four = testWhatDoYouTurnInto();
        boolean five = testWhereToApparate();
        if(one && two && three && four && five){
            System.out.println("Level 4 works");
            return true;
        }
        else{
            System.out.println("Level 4 DOES NOT work");
            return false;
        }
    }

    public static boolean testWhatTypeOfNumberIsIt(){
        NumberAnalyzer student = new NumberAnalyzer();
        boolean output = true;

        int [] numbers = {-49, -132145, -115992, -6, 0, 14, 131230, 1239917, 1299 };
        String [] results = {"negative odd", "negative odd", "negative even", "negative even",  "zero", "positive even", "positive even", "positive odd", "positive odd", };

        for(int i = 0; i < numbers.length; i++){
            if(!student.whatTypeOfNumberIsIt(numbers[i]).equals(results[i])){
                System.out.println("whatTypeOfNumberIsIt failed, " + "whatTypeOfNumberIsIt(" + numbers[i] + ")" + " results in " + student.whatTypeOfNumberIsIt(numbers[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatTypeOfNumberIsIt works");
        }else{
            System.out.println("whatTypeOfNumberIsIt does not work");
        }
        return output;
    }

    public static boolean testWhatIsMySalary(){
        PayRoll student = new PayRoll();
        boolean output = true;

        String [] degrees = {"Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Doctorate", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Masters", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Bachelors", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "Associates", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree", "No Degree"};
        int [] yearsExperience = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 32, 17, 34, 34, 15, 32, 34, 15, 13, 16, 35, 2, 4, 24, 9, 36, 11, 39, 40, 35, 15, 3, 21, 31, 21, 40, 24, 15, 22, 36, 2, 30, 0, 27, 26, 20, 5, 33, 6, 13, 7, 6, 13, 36, 15, 4, 39, 3, 12, 31, 5, 13, 27, 18, 29, 9, 29, 26, 16, 35, 27, 31, 2, 18, 3, 39, 29, 14, 38, 22, 5, 16, 24, 26, 21, 2, 20, 14, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 10, 39, 20, 23, 13, 38, 24, 21, 37, 23, 38, 36, 16, 8, 19, 20, 16, 16, 7, 5, 19, 4, 13, 16, 31, 40, 1, 31, 27, 26, 2, 14, 10, 11, 37, 22, 16, 31, 2, 16, 37, 18, 32, 38, 25, 3, 1, 22, 26, 26, 8, 23, 14, 0, 22, 1, 18, 27, 6, 33, 11, 39, 9, 2, 12, 27, 6, 21, 21, 32, 35, 33, 5, 27, 6, 20, 19, 12, 10, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18, 1, 24, 23, 34, 7, 24, 27, 5, 3, 10, 6, 28, 37, 1, 39, 27, 12, 17, 15, 34, 0, 17, 20, 39, 34, 31, 34, 2, 13, 14, 33, 2, 30, 15, 33, 34, 27, 25, 39, 34, 3, 30, 8, 30, 22, 24, 26, 22, 12, 33, 38, 17, 6, 9, 31, 4, 7, 38, 35, 16, 15, 38, 4, 21, 39, 37, 16, 4, 14, 6, 31, 38, 10, 2, 26, 2, 32, 27, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 29, 4, 4, 38, 7, 31, 27, 32, 15, 29, 13, 14, 5, 26, 29, 27, 14, 15, 25, 7, 0, 6, 4, 15, 25, 6, 12, 26, 33, 27, 21, 36, 17, 27, 20, 25, 18, 30, 33, 37, 18, 23, 33, 10, 20, 25, 6, 5, 17, 14, 27, 40, 17, 16, 17, 39, 40, 25, 9, 11, 26, 29, 27, 20, 4, 33, 17, 30, 39, 14, 7, 36, 28, 14, 3, 0, 35, 15, 21, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 28, 8, 39, 37, 12, 39, 35, 27, 25, 0, 32, 27, 8, 4, 26, 23, 8, 18, 15, 3, 18, 30, 21, 5, 35, 11, 25, 31, 29, 32, 15, 6, 2, 22, 30, 26, 28, 30, 34, 3, 16, 22, 4, 13, 8, 1, 34, 11, 38, 38, 23, 21, 26, 2, 22, 3, 39, 24, 15, 28, 13, 38, 22, 33, 40, 20, 17, 28, 13, 31, 6, 12, 15, 21, 6, 15, 39, 39, 8, 27, };
        Double [] sales = {0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 366544.0, 733777.0, 378650.0, 726337.0, 227906.0, 498742.0, 904042.0, 623214.0, 633448.0, 902278.0, 514099.0, 733357.0, 497035.0, 413205.0, 815210.0, 489625.0, 780056.0, 399942.0, 910618.0, 992759.0, 829657.0, 511513.0, 255672.0, 225426.0, 939283.0, 925424.0, 736961.0, 559687.0, 784671.0, 365485.0, 928429.0, 760983.0, 388400.0, 592757.0, 477640.0, 891787.0, 866130.0, 272689.0, 775286.0, 718040.0, 807659.0, 521622.0, 261064.0, 421489.0, 345917.0, 635758.0, 519074.0, 621070.0, 367029.0, 305719.0, 315820.0, 506430.0, 514557.0, 819839.0, 533986.0, 286754.0, 641070.0, 359286.0, 755069.0, 757986.0, 960142.0, 288167.0, 444032.0, 991586.0, 351922.0, 341725.0, 289070.0, 947945.0, 475389.0, 815756.0, 249635.0, 817591.0, 340425.0, 460369.0, 665834.0, 293289.0, 592824.0, 581224.0, 982336.0, 376189.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 965365.0, 451358.0, 439893.0, 919119.0, 948080.0, 536737.0, 487632.0, 910169.0, 330833.0, 638651.0, 869204.0, 699684.0, 471335.0, 256082.0, 735944.0, 773786.0, 941731.0, 671163.0, 340166.0, 677555.0, 806865.0, 460863.0, 661696.0, 290994.0, 387377.0, 338016.0, 920783.0, 260908.0, 360722.0, 624822.0, 530528.0, 991801.0, 853263.0, 461933.0, 241922.0, 598946.0, 976546.0, 856284.0, 634641.0, 426736.0, 260905.0, 270737.0, 306725.0, 535434.0, 439487.0, 458729.0, 316248.0, 559465.0, 635854.0, 446990.0, 828127.0, 740365.0, 808270.0, 769494.0, 919169.0, 537508.0, 503802.0, 255752.0, 694507.0, 419750.0, 975367.0, 676582.0, 268535.0, 641097.0, 514831.0, 350462.0, 763465.0, 603536.0, 255309.0, 413619.0, 678637.0, 210150.0, 295777.0, 456950.0, 383715.0, 811642.0, 601117.0, 432923.0, 488874.0, 349380.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 530730.0, 335568.0, 845118.0, 698125.0, 648849.0, 556696.0, 727850.0, 611513.0, 269644.0, 421451.0, 956823.0, 673472.0, 390291.0, 606350.0, 905583.0, 458648.0, 265085.0, 942900.0, 353548.0, 305013.0, 873759.0, 509950.0, 333838.0, 301733.0, 737100.0, 717887.0, 529975.0, 495463.0, 933026.0, 287790.0, 574596.0, 918165.0, 366204.0, 828698.0, 803278.0, 239584.0, 944382.0, 316083.0, 616634.0, 847519.0, 914509.0, 774682.0, 803769.0, 358980.0, 411815.0, 668786.0, 380243.0, 965403.0, 274952.0, 303139.0, 293672.0, 215004.0, 980314.0, 737547.0, 950061.0, 635431.0, 748680.0, 918334.0, 714030.0, 599808.0, 877299.0, 329774.0, 336034.0, 239329.0, 950531.0, 268617.0, 859718.0, 405499.0, 382181.0, 244832.0, 362508.0, 885162.0, 542655.0, 611698.0, 682601.0, 271436.0, 324040.0, 328365.0, 285436.0, 893685.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 596262.0, 558018.0, 822806.0, 809640.0, 407428.0, 204743.0, 737717.0, 662820.0, 781484.0, 892265.0, 668120.0, 608338.0, 966307.0, 687631.0, 802656.0, 310262.0, 985370.0, 873006.0, 941516.0, 813623.0, 546093.0, 668685.0, 615556.0, 894206.0, 558006.0, 610445.0, 816800.0, 689252.0, 913852.0, 284376.0, 293424.0, 812194.0, 386757.0, 322306.0, 362390.0, 554551.0, 696591.0, 360938.0, 392811.0, 578100.0, 998636.0, 867846.0, 713212.0, 500464.0, 447698.0, 937432.0, 295773.0, 377228.0, 290792.0, 359982.0, 770723.0, 883714.0, 341495.0, 866947.0, 523958.0, 399540.0, 889139.0, 855558.0, 431064.0, 999091.0, 495918.0, 495923.0, 580819.0, 351010.0, 335086.0, 723719.0, 341335.0, 329869.0, 323321.0, 621595.0, 721949.0, 943102.0, 500417.0, 292430.0, 983989.0, 376353.0, 509411.0, 527563.0, 853544.0, 560368.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 0.0, 25000.0, 50000.0, 75000.0, 100000.0, 125000.0, 150000.0, 175000.0, 200000.0, 225000.0, 250000.0, 275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 425000.0, 450000.0, 475000.0, 500000.0, 525000.0, 550000.0, 575000.0, 600000.0, 625000.0, 650000.0, 675000.0, 700000.0, 725000.0, 750000.0, 775000.0, 800000.0, 825000.0, 850000.0, 875000.0, 900000.0, 925000.0, 950000.0, 975000.0, 1000000.0, 630276.0, 373104.0, 689360.0, 262529.0, 820301.0, 297489.0, 958990.0, 306182.0, 814289.0, 463360.0, 976315.0, 920868.0, 537691.0, 606923.0, 253575.0, 226588.0, 285806.0, 227908.0, 421022.0, 655232.0, 322172.0, 393241.0, 267326.0, 712280.0, 549270.0, 657563.0, 653857.0, 881921.0, 304662.0, 803724.0, 255970.0, 678701.0, 935708.0, 506369.0, 884421.0, 848832.0, 405954.0, 621748.0, 540022.0, 924277.0, 586353.0, 406865.0, 554692.0, 932753.0, 884405.0, 371109.0, 571994.0, 266760.0, 864383.0, 663467.0, 920306.0, 514775.0, 311732.0, 298470.0, 931739.0, 857718.0, 594792.0, 323976.0, 359943.0, 433836.0, 976953.0, 633930.0, 849903.0, 675124.0, 532382.0, 329213.0, 612865.0, 818384.0, 518435.0, 529720.0, 459521.0, 794094.0, 657882.0, 740776.0, 344558.0, 296163.0, 584078.0, 877027.0, 975724.0, 635735.0, };
        double [] results = {100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 132500.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 162500.0, 165000.0, 167500.0, 170000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 225000.0, 227500.0, 230000.0, 232500.0, 235000.0, 237500.0, 240000.0, 242500.0, 245000.0, 247500.0, 250000.0, 252500.0, 255000.0, 257500.0, 260000.0, 262500.0, 265000.0, 267500.0, 270000.0, 272500.0, 275000.0, 277500.0, 280000.0, 282500.0, 285000.0, 287500.0, 290000.0, 292500.0, 295000.0, 221654.4, 303377.7, 192865.0, 312633.7, 270000.0, 194874.2, 320404.2, 302321.4, 208344.8, 225227.8, 201409.9, 318335.7, 129703.5, 131320.5, 271521.0, 163962.5, 328005.6, 164994.2, 356061.8, 369275.9, 327965.7, 196151.3, 115000.0, 205000.0, 318928.3, 267542.4, 343696.1, 245968.7, 223467.1, 216548.5, 342842.9, 156098.3, 258840.0, 129275.7, 252764.0, 289178.7, 256613.0, 125000.0, 312528.6, 171804.0, 215765.9, 157162.2, 130000.0, 177148.9, 284591.7, 208575.8, 141907.4, 327107.0, 121702.9, 160571.9, 256582.0, 145643.0, 186455.7, 286983.9, 213398.6, 245000.0, 179107.0, 250928.6, 275506.9, 225798.6, 341014.2, 235000.0, 269403.2, 179158.6, 195192.2, 119172.5, 295000.0, 309794.5, 187538.9, 341575.6, 210000.0, 176759.1, 184042.5, 236036.9, 266583.4, 205000.0, 139282.4, 228122.4, 238233.6, 197618.9, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 162500.0, 165000.0, 167500.0, 170000.0, 172500.0, 175000.0, 177500.0, 180000.0, 182500.0, 185000.0, 187500.0, 190000.0, 192500.0, 195000.0, 197500.0, 200000.0, 202500.0, 205000.0, 156536.5, 192135.8, 133989.3, 190911.9, 163808.0, 197673.7, 150763.2, 184016.9, 174083.3, 162865.1, 230920.4, 207968.4, 125133.5, 84000.0, 160594.4, 167378.6, 172173.1, 145116.3, 85016.6, 112755.5, 167686.5, 88086.3, 135169.6, 108000.0, 161737.7, 183801.6, 125078.3, 153000.0, 147072.2, 170482.2, 89052.8, 171180.1, 145326.3, 109193.3, 171000.0, 155894.6, 175654.6, 208628.4, 99464.1, 120673.6, 171000.0, 114000.0, 156672.5, 197543.4, 148948.7, 84872.9, 64624.8, 151946.5, 171585.4, 152699.0, 136812.7, 173036.5, 152827.0, 106949.4, 187916.9, 86750.8, 134380.2, 141000.0, 117450.70000000001, 170975.0, 160536.7, 214658.2, 87000.0, 100109.70000000001, 117483.1, 146046.2, 124346.5, 153353.6, 123000.0, 167361.9, 202863.7, 159000.0, 75000.0, 156695.0, 86371.5, 171164.2, 147111.7, 109292.3, 108887.4, 139938.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 102500.0, 105000.0, 107500.0, 110000.0, 112500.0, 115000.0, 117500.0, 120000.0, 122500.0, 125000.0, 127500.0, 130000.0, 132500.0, 135000.0, 137500.0, 140000.0, 142500.0, 145000.0, 147500.0, 150000.0, 152500.0, 155000.0, 157500.0, 160000.0, 99073.0, 45556.8, 142511.8, 125812.5, 142884.9, 79669.6, 130785.0, 125151.3, 50000.0, 58145.1, 125682.3, 89347.20000000001, 105029.1, 144635.0, 102558.3, 133864.8, 94000.0, 128290.0, 79354.8, 70501.3, 165375.9, 60995.0, 77383.8, 80173.3, 161710.0, 149788.7, 124997.5, 127546.3, 107302.6, 66000.0, 95459.6, 167816.5, 50620.4, 152869.8, 120327.8, 106000.0, 172438.2, 95608.3, 121663.4, 172751.9, 169450.9, 93468.20000000001, 150376.9, 61898.0, 111181.5, 120878.6, 96024.3, 158540.3, 84000.0, 64313.9, 106000.0, 116000.0, 142031.40000000002, 95754.70000000001, 123006.1, 135543.1, 92868.0, 115833.4, 157403.0, 139980.8, 129729.9, 72977.4, 119603.4, 48000.0, 147053.1, 118000.0, 169971.8, 82549.9, 56218.1, 68000.0, 58250.8, 160516.2, 140265.5, 91169.8, 82260.1, 92000.0, 46404.0, 106836.5, 94000.0, 123368.5, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 87500.0, 90000.0, 92500.0, 95000.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 56250.0, 58750.0, 61250.0, 63750.0, 66250.0, 68750.0, 71250.0, 73750.0, 76250.0, 78750.0, 81250.0, 83750.0, 86250.0, 88750.0, 91250.0, 93750.0, 96250.0, 98750.0, 101250.0, 103750.0, 106250.0, 108750.0, 111250.0, 113750.0, 116250.0, 118750.0, 121250.0, 123750.0, 126250.0, 90876.2, 55801.8, 82280.6, 123464.0, 44492.8, 63750.0, 102521.70000000001, 101282.0, 91898.4, 120476.5, 78062.0, 73333.8, 97880.7, 96263.1, 111515.6, 59776.2, 111037.0, 101050.6, 120401.6, 85112.3, 49609.3, 69368.5, 61555.600000000006, 103170.6, 82050.6, 63544.5, 91680.0, 96425.20000000001, 127635.20000000001, 58750.0, 51250.0, 121219.4, 54925.7, 60980.6, 56239.0, 81705.1, 87159.1, 68593.8, 75531.1, 99060.0, 117363.6, 110534.6, 107571.20000000001, 57546.4, 64769.8, 119993.20000000001, 32500.0, 38972.8, 46250.0, 48498.2, 105822.3, 133371.4, 50399.5, 101694.70000000001, 68645.8, 83704.0, 133913.9, 111805.8, 49356.4, 108659.1, 77091.8, 80842.3, 86831.9, 55101.0, 33508.6, 108621.9, 50383.5, 65486.9, 76082.1, 74659.5, 75944.9, 134310.2, 80041.7, 42500.0, 97148.90000000001, 32635.3, 89691.1, 66506.3, 106604.4, 92286.8, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 15000.0, 17500.0, 20000.0, 22500.0, 25000.0, 27500.0, 30000.0, 32500.0, 35000.0, 37500.0, 40000.0, 42500.0, 45000.0, 47500.0, 50000.0, 52500.0, 55000.0, 57500.0, 60000.0, 62500.0, 65000.0, 67500.0, 70000.0, 72500.0, 75000.0, 77500.0, 80000.0, 82500.0, 85000.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 33750.0, 36250.0, 38750.0, 41250.0, 43750.0, 46250.0, 48750.0, 51250.0, 53750.0, 56250.0, 58750.0, 61250.0, 63750.0, 66250.0, 68750.0, 71250.0, 73750.0, 76250.0, 78750.0, 81250.0, 83750.0, 86250.0, 88750.0, 91250.0, 93750.0, 96250.0, 98750.0, 101250.0, 103750.0, 69027.6, 28310.4, 83186.0, 42750.0, 76030.1, 44250.0, 107149.0, 35868.2, 85178.9, 31336.0, 106631.5, 97336.8, 44769.100000000006, 48692.3, 34500.0, 32250.0, 21000.0, 28500.0, 38352.2, 52773.200000000004, 30717.2, 46824.1, 30750.0, 59978.0, 66177.0, 59006.3, 69135.70000000001, 96442.1, 37216.2, 89372.4, 26250.0, 57370.1, 80070.8, 52136.9, 95942.1, 89383.20000000001, 46595.4, 69674.8, 64502.2, 79677.70000000001, 55635.3, 42186.5, 43469.2, 88025.3, 79440.5, 22860.9, 67699.4, 23250.0, 99938.3, 79846.70000000001, 94280.6, 52227.5, 35673.2, 16500.0, 94673.9, 73021.8, 73729.2, 35397.6, 32244.3, 49383.6, 92445.3, 76893.0, 86490.3, 77262.4, 68238.2, 32921.3, 59036.5, 87838.4, 46593.5, 61222.0, 35452.1, 73409.4, 62038.200000000004, 74827.6, 23955.8, 26250.0, 72657.8, 101952.70000000001, 88572.40000000001, 68823.5, };

        for(int i = 0; i < degrees.length; i++){
            if(Math.abs(student.whatIsMySalary(degrees[i], yearsExperience[i], sales[i]) - results[i]) > .01){
                System.out.println("whatIsMySalary failed, " + "whatIsMySalary(" + degrees[i] + ", " + yearsExperience[i] + ", " + sales[i] + ")" + " results in " + student.whatIsMySalary(degrees[i], yearsExperience[i], sales[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatIsMySalary works");
        }else{
            System.out.println("whatIsMySalary does not work");
        }
        return output;
    }


    public static boolean testwhatSeason(){
        Calendar student = new Calendar();
        boolean output = true;

        String [] months = {"January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "January", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "February", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "March", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "April", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "June", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "July", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "August", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "September", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "October", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "November", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December", "December"};
        int [] days = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, };
        String [] results = {"winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "spring", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "summer", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "fall", "winter", "winter", "winter", "winter", "winter", "winter", "winter", "winter"};

        for(int i = 0; i < months.length; i++){
            if(student.whatSeason(months[i], days[i]) != results[i]){
                System.out.println("whatSeason failed, " + "whatSeason(" + months[i] + ", " + days[i] + ")" + " results in " + student.whatSeason(months[i], days[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatSeason works");
        }else{
            System.out.println("whatSeason does not work");
        }
        return output;
    }


    public static boolean testWhatDoYouTurnInto(){
        Hogwarts student = new Hogwarts();
        boolean output = true;

        int[] doorNumbers = {1, 1, 1, 2, 2, 2, 3, 3, 3};
        String [] drinkColor = {"pink", "green", "blue", "pink", "green", "blue", "pink", "green", "blue"};
        String [] results = {"Cat", "Toad", "Owl", "Rat", "Snake", "Griffin", "Unicorn", "Dragon", "Giant Squid"};

        for(int i = 0; i < doorNumbers.length; i++){
            if(!student.whatDoYouTurnInto(doorNumbers[i], drinkColor[i]).equals(results[i])){
                System.out.println("whatDoYouTurnInto failed, " + "whatDoYouTurnInto(" + doorNumbers[i] + ", " + drinkColor[i]  + ")" + " results in " + student.whatDoYouTurnInto(doorNumbers[i], drinkColor[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whatDoYouTurnInto works");
        }else{
            System.out.println("whatDoYouTurnInto does not work");
        }
        return output;
    }

    public static boolean testWhereToApparate(){
        Hogwarts student = new Hogwarts();
        boolean output = true;

        boolean [] overseas = {true, true, true, true, false, false, false, false};
        boolean [] onCoast = {true, true, false, false, true, true, false, false};
        boolean [] inBigCity = {true, false, true, false, true, false, true, false, };
        String [] results = {"Hong Kong", "Nassua", "London", "Lucerne", "Los Angeles", "Nags Head", "Chicago", "Blacksburg"};

        for(int i = 0; i < overseas.length; i++){
            if(!student.whereToApparate(overseas[i], onCoast[i], inBigCity[i]).equals(results[i])){
                System.out.println("whereToApparate failed, " + "whereToApparate(" + overseas[i] + ", " + onCoast[i] + ", " + inBigCity[i] + ")" + " results in " + student.whereToApparate(overseas[i], onCoast[i], inBigCity[i]) + ", not equal to " + results[i]);
                output = false;
            }
        }

        if(output){
            System.out.println("whereToApparate works");
        }else{
            System.out.println("whereToApparate does not work");
        }
        return output;
    }
}